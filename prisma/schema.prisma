generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma-app/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Table: account
model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamp(6)
  refreshTokenExpiresAt DateTime? @db.Timestamp(6)
  scope                 String?
  password              String?
  createdAt             DateTime  @db.Timestamp(6)
  updatedAt             DateTime  @db.Timestamp(6)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("account")
}

// Table: blog
model Blog {
  id         String    @id @default(uuid())
  title      String
  slug       String    @unique
  excerpt    String?
  category   String
  authorId   String
  content    String
  tags       Json?
  coverImage String?
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @default(now()) @db.Timestamp(6)
  published  Boolean?  @default(false)
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comment    Comment[]

  @@map("blog")
}

// Table: inquiry
model Inquiry {
  id         String   @id @default(uuid())
  help_with  String[]
  budget     String
  name       String
  email      String
  overview   String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@map("inquiry")
}

// Table: session
model Session {
  id        String   @id
  expiresAt DateTime @db.Timestamp(6)
  token     String   @unique
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("session")
}

// Table: user
model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
  account       Account[]
  blog          Blog[]
  session       Session[]
  facebook      String?
  linkedin      String?
  twitter       String?
  contact_url   String?
  bio           String?
  publishData   Boolean?
  slug          String?   @unique
  work_role     String?

  @@map("user")
}

// Table: verification
model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @db.Timestamp(6)
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  updatedAt  DateTime? @default(now()) @db.Timestamp(6)

  @@map("verification")
}

// Table: comment
model Comment {
  id          String   @id @default(cuid())
  postId      String
  content     String
  displayName String?  @default("Anonymous")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blog        Blog     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("comment")
}
